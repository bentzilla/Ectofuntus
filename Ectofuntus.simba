program Ectofuntus;
{$DEFINE SMART}
{$I SRL\SRL.scar}
{$I Reflection\Reflection.simba}
{$I SRL\SRL\Misc\PaintSMART.scar}
{$I RefPaint.simba}
{$I InterfaceExplorer.simba}

{******************************************************************************)
                                  Setup Here
*******************************************************************************}
const
  MOUSE_SPEED    = 11;

procedure SetupSmart;
begin
  Smart_Server      := 152;
  Smart_Members     := False;
  Smart_Signed      := True;
  Smart_SuperDetail := False;
end;

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  with Players[0] do
  begin
    Name        := 'Username';
    Pass        := 'Password';
    Nick        := '3 - 4 Letters of Username';
    BoxRewards  := ['Lamp', 'Coins'];           // Box Reward
    LampSkill   := 'Prayer';                    // Skill to advance with Lamp Reward
    Active      := True;                        // Active ?
    Integers[0] := 526;                         // Bone ID - List is below
    Integers[1] := 18;                          // Number of bones to use
  end;

  {
  with Players[1] do
  begin
    Name        := 'Username';
    Pass        := 'Password';
    Nick        := '3 - 4 Letters of Username';
    BoxRewards  := ['Lamp', 'Coins'];           // Box Reward
    LampSkill   := 'Prayer';                    // Skill to advance with Lamp Reward
    Active      := True;                        // Active ?
    Integers[0] := 526;                         // Bone ID - List is below
    Integers[1] := 18;                          // Number of bones to use
  end;
  }

end;

{******************************************************************************)
                                  End Setup
*******************************************************************************}

{*******************************************************************************
                              Constants and Vars
*******************************************************************************}

const
  // * - To Be Implemented \\
  // Script
    SCRIPT_VER      = 0.01;
  // Bone ID's
    ID_AccursedAsh  = 20266; //*
    ID_Bone         = 526;
    ID_BoneC        = 4255;
    ID_BigBone      = 532;
    ID_BigBoneC     = 4257;
    ID_BabyBone     = 534;
    ID_BabyBoneC    = 4260;
    ID_WyvernBone   = 6812 ;
    ID_WyvernBoneC  = 6810;
    ID_InfernalAsh  = 20268; //*
    ID_DragonBone   = 536;
    ID_DragonBoneC  = 4261;
    ID_OurgBone     = 14793;
    ID_OurgBoneC    = 4855;
    ID_FrostDBone   = 18832;
    ID_FrostDBoneC  = 18834;
  // Equipment ID's
    ID_Ectophial    = 4251;
    ID_RingOfKin    = 15707;
    ID_Bucket       = 1925;
    ID_BucketS      = 4286;
    ID_Pot          = 1931;
    ID_Token        = 4278;
  // Ectofuntus ID's
    ID_Ecto         = 5282;
    ID_Bin          = 11164;
    ID_Grinder      = 11163;
    ID_Hopper       = 11162;
    ID_StairUF1     = 37454;
    ID_StairDF1     = 5281;
    ID_TrapDoorC    = 5267;
    ID_TrapDoorO    = 5268;
    ID_Ladder       = 5264;
    ID_Shortcut     = 17030; //*
    ID_StairDFB     = 5263;
    ID_StairUFB     = 5262;
    ID_Slime        = 17119;
  // NPC ID's
    ID_Disciple     = 1686;
    ID_FremBank     = 9710;
  // Paths
    PATH_FremBank   = 0;
    PATH_StairUF1   = 1;
    PATH_StairDF1   = 2;
    PATH_TrapDoor   = 3;
    PATH_StairDFB1  = 4;
    PATH_StairDFB2  = 5;
    PATH_StairDFB3  = 6;
    PATH_Token      = 7;
  // Player Index
    PLAYER_BONE     = 0;
    PLAYER_BONETODO = 1;
    PLAYER_BONEDONE = 2;


{*******************************************************************************
                            End Constants and Vars
*******************************************************************************}

{*******************************************************************************
                                   Script
*******************************************************************************}

{*******************************************************************************
function Time: String;
Description: Returns Current Time
*******************************************************************************}
function Time: String;
var
  H, M, S, MS: Word;
begin
  DecodeTime(Now, H, M, S, MS);
  Result := (Padz(IntToStr(H), 2) + ':' + Padz(IntToStr(M), 2) + ':' + Padz(IntToStr(S), 2));
end;

{*******************************************************************************
procedure Debug(s: String);
Description: Writes debug message with current time
*******************************************************************************}
procedure Debug(s: String; Terminate: Boolean);
begin
  Writeln('[' + Time + ']: ' + s);
  if Terminate then
  begin
    Writeln('[' + Time + ']: Terminating Script');
    TerminateScript;
  end;
end;

{*******************************************************************************
function R_LastChatMessage: String;
Description: [REF] Returns the last chat message
*******************************************************************************}
function R_LastChatMessage: String;
var
  i: Integer;
begin
  if not R_ValidInterface(137) then
  begin
    Debug('Invalid Interface in R_LastChatMessage', False);
    Exit;
  end;
  for i := 279 downto 180 do
  begin
    Result := R_GetInterfaceText(137, i);
    if (Result = '') then
      Continue
    else
      Exit;
  end;
end;

{*******************************************************************************
function R_LoadPath(Path: Integer): TPointArray;
Description: [REF] Loads Reflection Path.
*******************************************************************************}
function R_LoadPath(Path: Integer): TPointArray;
begin
  case Path of
    {PATH_FremBank:  Result := [Point(3448, 3698), Point(3448, 3703), Point(3448, 3707),
                               Point(3448, 3712), Point(3450, 3716), Point(3451, 3721)]; }
    PATH_FremBANK:  Result := [Point(3443, 3694), Point(3447, 3698), Point(3450, 3705),
                               Point(3449, 3712), Point(3449, 3720)];
    PATH_StairUF1:  Result := [Point(3663, 3520)];
    PATH_StairDF1:  Result := [Point(3666, 3522)];
    PATH_TrapDoor:  Result := [Point(3656, 3519)];
    PATH_StairDFB1: Result := [Point(3680, 9874), Point(3687, 9877), Point(3692, 9888)];
    PATH_StairDFB2: Result := [Point(3671, 9888)];
    PATH_StairDFB3: Result := [Point(3687, 9888)];
    PATH_Token:     Result := [Point(3659, 3515)];
  end;
end;

{*******************************************************************************
function R_WalkTo(Path: Integer): Boolean;
Description: [REF] Walk to ...
*******************************************************************************}
function R_WalkTo(Path: Integer): Boolean;
begin
  R_SetCameraAngle(100);
  R_SetRun(True);
  if (R_WalkPath(R_LoadPath(Path))) then
    Result := True;
  while not R_IsIdle do
    Wait(1000);
  Wait(800 + Random(300));
end;

{*******************************************************************************
function R_ClickTo(Path: Integer): Boolean;
Description: [REF] Click to ...
*******************************************************************************}
function R_ClickTo(Path: Integer): Boolean;
var
  t: TTileArray;
  TP: TPoint;
begin
  R_SetCameraAngle(100);
  R_SetRun(True);
  t := R_LoadPath(Path);
  if R_TileOnMS(t[0], 1) then
  begin
    TP := R_TileToMS(t[0], 1);
    Mouse(TP.x, TP.y, 2, 2, True);
    Result := True;
    Wait(800);
  end;
  while not R_IsIdle do
    Wait(1000);
  Wait(800 + Random(300));
end;

{*******************************************************************************
function GetGroundID(BoneID: Integer): Integer;
Description: Returns the Crushed ID of a bone
*******************************************************************************}
function GetGroundID(BoneID: Integer): Integer;
begin
  case BoneID of
    ID_Bone:       Result := ID_BoneC;
    ID_BigBone:    Result := ID_BigBoneC;
    ID_BabyBone:   Result := ID_BabyBoneC;
    ID_WyvernBone: Result := ID_WyvernBoneC;
    ID_DragonBone: Result := ID_DragonBoneC;
    ID_OurgBone:   Result := ID_OurgBoneC;
    ID_FrostDBone: Result := ID_FrostDBoneC;
  end;
end;

{*******************************************************************************
function R_GrindBones(BoneID: Integer): Boolean;
Description: [REF] Grinds bones
*******************************************************************************}
function R_GrindBones(BoneID: Integer): Boolean;
var
  o: TRSObject;
  TP: TPoint;
begin
  o := R_GetObject(ID_Hopper, OBJ_INTERACTABLE, 30);
  if o = NULL_RSOBJECT then
  begin
    Debug('Null RSObject in R_GrindBones', False);
    Exit;
  end;
  TP := R_TileToMS(o.Tile, 1);
  MMouse(TP.x, TP.y, 2, 2);
  GetMousePos(TP.x, TP.y);
  if R_IsUpText('Fill') then
    Mouse(TP.x, TP.y, 0, 0, True);
  while (not (R_CountItem(GetGroundID(BoneID)) = 9)) do
    Wait(1000);
  Result := (R_CountItem(GetGroundID(BoneID)) = 9);
end;

{*******************************************************************************
function R_UseStair(ID: Integer; UpText: String; ExpectedTile: TTile): Boolean;
Description: [REF] Uses Stairs, waits until the expected tile is met
*******************************************************************************}
function R_UseStair(ObjType, ID: Integer; UpText: String; ExpectedTile, ExpectedTile2: TTile): Boolean;
var
  o: TRSObject;
  TP: TPoint;
begin
  o := R_GetObject(ID, ObjType, 20);
  if o = NULL_RSOBJECT then
  begin
    if (ID = ID_TrapDoorC) then
    begin
      Debug('Trap Door Already Open', False);
      Exit;
    end;
    Debug('Null RSObject in R_UseStair', False);
    Exit;
  end;
  TP := R_TileToMS(o.Tile, 1);
  MMouse(TP.x, TP.y, 2, 2);
  GetMousePos(TP.x, TP.y);
  if R_IsUpText(UpText) then
  begin
    Mouse(TP.x, TP.y, 0, 0, True);
    Result := True;
  end else
  if R_IsUpText('ciple') then
  begin
    Mouse(TP.x, TP.y, 0, 0, False);
    Result := R_ChooseOption(UpText);
  end;
  if ExpectedTile = Point(0, 0) then
    Exit;
  while (not ((R_GetMyPos = ExpectedTile) or (R_GetMyPos = ExpectedTile2))) do
    Wait(1000);
  Wait(1000);
end;

{*******************************************************************************
function R_UseStair2(ID: Integer; UpText: String; Left: Boolean): Boolean;
Description: [REF] Uses Ecto Stairs. Cuts Object into half either left/right
*******************************************************************************}
function R_UseStair2(ObjType, ID: Integer; UpText: String; Left: Boolean): Boolean;
var
  o: TRSObject;
  TP: TPoint;
begin
  R_MakeCompass('n');
  o := R_GetObject(ID, ObjType, 20);
  if o = NULL_RSOBJECT then
  begin
    if (ID = ID_TrapDoorC) then
      Exit;
    Debug('Null RSObject in R_UseStair', False);
    Exit;
  end;
  Writeln('X1: ' + IntToStr(o.TileArea.X1) + ' | Y1: ' + IntToStr(o.TileArea.Y1) + ' | X2: ' + IntToStr(o.TileArea.X2) + ' | Y2: ' + IntToStr(o.TileArea.Y2));
  Writeln('Point 1: (' + IntToStr(R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1).x) + ', ' + IntToStr(R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1).y) + ')');
  Writeln('Point 2: (' + IntToStr(R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y2), 1).x) + ', ' + IntToStr(R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y2), 1).y) + ')');
  R_DrawLine(True, R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1), R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y2), 1), clRed);

  if left then
  begin
    R_DrawLine(False, R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1), R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y2), 1), clBlue);
    TP := Point(RandomRange(R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1).x - 10, R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1).x + 10), RandomRange(R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y1), 1).y + 10, R_TileToMS(Point(o.TileArea.X1, o.TileArea.Y2), 1).y - 10));
  end else
  begin
    R_DrawLine(False, R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y1), 1), R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y2), 1), clBlue);
    TP := Point(RandomRange(R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y1), 1).x - 10, R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y1), 1).x + 10), RandomRange(R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y1), 1).y + 10, R_TileToMS(Point(o.TileArea.X2, o.TileArea.Y2), 1).y - 10));
  end;

  R_DrawCircle(False, TP, 3,  clGreen);

  MMouse(TP.x, TP.y, 5, 2);
  GetMousePos(TP.x, TP.y);
  if R_IsUpText(UpText) then
  begin
    Mouse(TP.x, TP.y, 0, 0, True);
    Result := True;
  end;
end;

{*******************************************************************************
function R_ToSlime: Boolean;
Description: [REF] Walks to the slime
*******************************************************************************}
function R_ToSlime: Boolean;
var
  i: Integer;
  t: TIntegerArray;
  b: TBoolArray;
begin
  ClearSmartCanvas;
  t := [3688, 3675, 3683];
  b := [False, True, False];
  for i := PATH_StairDFB1 to PATH_StairDFB3 do
  begin
    R_WalkTo(i);
    while not R_IsIdle do
      Wait(1000);
    Wait(RandomRange(1200, 1500));
    Debug('At Stair', False);
    R_UseStair2(OBJ_INTERACTABLE, ID_StairDFB, 'own', b[i - 4]);
    while not R_IsIdle do                                      // #1: (3688, 9888)
      Wait(1000);                                              // #2: (3675, 9888)
    while not (R_GetMyPos = Point(t[i - 4], 9888)) do          // #3: (3683, 9888)
      Wait(1000);
    ClearSmartCanvas;
  end;
  Result := R_GetMyPos = Point(t[2], 9888);
end;

{*******************************************************************************
function R_GetSlime: Boolean;
Description: [REF] Gets slime
*******************************************************************************}
function R_GetSlime: Boolean;
var
  o: TRSObject;
  TP: TPoint;
begin
  R_ClickItemBy(ID_Bucket, 'Use');
  o := R_GetObject(ID_Slime, OBJ_FLOORDECORATION, 30);
  if o = NULL_RSOBJECT then
  begin
    Debug('Null RSObject in R_GetSlime', False);
    Exit;
  end;
  TP := R_TileToMS(o.Tile, 1);
  MMouse(TP.x, TP.y, 2, 2);
  GetMousePos(TP.x, TP.y);
  if R_IsUpText('lime') then
    Mouse(TP.x, TP.y, 0, 0, True);
  while (not (R_CountItem(ID_BucketS) = 9)) do
    Wait(1000);
  Result := (R_CountItem(ID_BucketS) = 9);
end;

{*******************************************************************************
function R_Worship: Boolean;
Description: [REF] Worships ectonfuntus
*******************************************************************************}
function R_Worship: Boolean;
var
  o: TRSObject;
  TP: TPoint;
  Item: TInvItem;
begin
  o := R_GetObject(ID_Ecto, OBJ_INTERACTABLE, 30);
  if o = NULL_RSOBJECT then
  begin
    Debug('Null RSObject in R_Worship', False);
    Exit;
  end;
  TP := R_TileToMS(o.Tile, 1);
  MMouse(TP.x, TP.y, 2, 2);
  GetMousePos(TP.x, TP.y);
  if R_IsUpText('orship') then
    while (R_ItemExists(ID_BucketS, Item)) do
    begin
      Mouse(TP.x, TP.y, 0, 0, True);
      Wait(RandomRange(500, 800));
    end;
  IncEx(Players[CurrentPlayer].Integers[PLAYER_BONEDONE], 9);
  Result := ((R_CountItem(ID_Bucket) = 9) and (R_CountItem(ID_Pot) = 9));
end;

{*******************************************************************************
function R_CollectTokens: Boolean;
Description: [REF] Collects Tokens
*******************************************************************************}
function R_CollectTokens: Boolean;
var
  NPC: TNPC;
  TP: TPoint;
  Item: TInvItem;
begin
  NPC := R_GetNPC(ID_Disciple, False);
  if NPC = NULL_NPC then
  begin
    Debug('Null NPC in R_CollectTokens', False);
    Exit;
  end;
  if NPC.Motion > 1 then
    while NPC.Motion > 1 do
    begin
      Writeln('Moving');
      Wait(1000);
      NPC := R_GetNPC(ID_Disciple, False);
    end;
  TP := R_TileToMS(NPC.Tile, 1);
  Mouse(TP.x, TP.y, 2, 2, False);
  Wait(500 + Random(25));
  R_ChooseOption('ollect');
  Wait(800 + Random(400));
  Result := R_ItemExists(ID_Token, Item);
  if not Result then
    R_CollectTokens;
  Wait(700 + Random (300));
end;

{*******************************************************************************
function R_OpenBankFrem: Boolean;
Description: [REF] Opens the Bank
*******************************************************************************}
function R_OpenBankFrem: Boolean;
var
  NPC: TNPC;
  TP: TPoint;
begin
  NPC := R_GetNPC(ID_FremBank, False);
  if NPC = NULL_NPC then
  begin
    Debug('Null NPC in R_BankFrem', False);
    Exit;
  end;
  TP := R_TileToMS(NPC.Tile, 1);
  Mouse(TP.x, TP.y, 2, 2, False);
  Wait(500 + Random(25));
  R_ChooseOption('Bank Frem');
  Wait(800 + Random(400));
  if R_PinScreen then
    if not InPin(Players[CurrentPlayer].Pin) then
      Debug('Could not enter Pin', True);
  Result := R_BankScreen;
end;

{*******************************************************************************
function R_UseBankFrem(BoneID: Integer): Boolean;
Description: [REF] Uses the bank
*******************************************************************************}
function R_UseBankFrem(BoneID: Integer): Boolean;
var
  Item: TInvItem;
begin
  if not R_OpenBankFrem then
    Exit;
  if R_ItemExists(ID_Token, Item) then
    R_DepositAllBy(ID_Token);
  Wait(250 + Random(250));
  if not R_WithdrawItem(BoneID, True) then
    Debug('Could not withdraw bones', True);
  R_CloseBank;
  Result := not R_BankScreen;
end;

{*******************************************************************************
function R_OpenTrapDoor: Boolean;
Description: [REF] Opens Trap Door
*******************************************************************************}
function R_OpenTrapDoor: Boolean;
begin
  if R_UseStair(OBJ_FLOORDECORATION, ID_TrapDoorC, 'pen', Point(0, 0), Point(0, 0)) then
    Wait(4000 + Random(300));
  Result := R_UseStair(OBJ_FLOORDECORATION, ID_TrapDoorO, 'own', Point(3669, 9888), Point(0, 0));
end;

{*******************************************************************************
function R_UseRing: Boolean;
Description: [REF] Teleports using ring
*******************************************************************************}
function R_UseRing: Boolean;
begin
  R_GameTab(RTAB_EQUIPMENT);
  R_ClickInterface(R_GetInterfaceChild(INTERFACE_EQUIPMENT, EQUIPMENT_RING), 2);
  Wait(250 + Random(25));
  Result := R_ChooseOption('elep');
  Wait(2000);
  while not R_IsIdle do
    Wait(1000);
  Wait(5500 + Random(400));
end;

{*******************************************************************************
function R_UseEctophial: Boolean;
Description: [REF] Teleports using ectophial
*******************************************************************************}
function R_UseEctophial: Boolean;
begin
  R_GameTab(RTAB_INVENTORY);
  R_ClickItemBy(ID_Ectophial, 'mpty');
  while (not (R_LastChatMessage = 'You refill the ectophial from the Ectofuntus.')) do
    Wait(1000);
  Wait(100 + Random(300));
  Result := True;
end;

{*******************************************************************************
function R_CheckSetup: Boolean;
Description: [REF] Results True if all is good.
*******************************************************************************}
function R_CheckSetup: Boolean;
var
  Item: TInvItem;
begin
  R_GameTab(RTAB_EQUIPMENT);
  if (not (R_IsEquipped(ID_RingOfKin))) then
    Debug('Ring of Kinship is not equipped', True);
  if (not (R_ItemExists(ID_Ectophial, Item))) then
    Debug('Ectophial is not in Inventory', True);
  if (not (R_CountItem(ID_Bucket) = 9)) then
    Debug('Please have 9 buckets in Inventory', True);
  if (not (R_CountItem(ID_Pot) = 9)) then
    Debug('Please have 9 pots in Inventory', True);
  Result := True;
end;

{*******************************************************************************
procedure Report;
Description: Displays progress report.
*******************************************************************************}
procedure Report;
var
  i: Integer;
begin
  SRLRandomsReport;
  WriteLn(' __________________________________');
  WriteLn('|                                  ');
  WriteLn('| ---------- Ectofuntus -----------');
  WriteLn('|__________________________________');
  WriteLn('|                                  ');
  WriteLn('|Ran For: ' + TimeRunning);
  WriteLn('|__________________________________');
  WriteLn('|                                  ');
  for i := 0 to (HowManyPlayers - 1) do
    WriteLn('|Player[' + IntToStr(i) + ']: Worshipped: ' + IntToStr(Players[i].Integers[PLAYER_BONEDONE]) + ' Bones');
  WriteLn('|__________________________________');
 { WriteLn('|                                  ');
  for i := 0 to (HowManyPlayers - 1) do
  begin
    WriteLn('|Player[' + IntToStr(i) + ']: Breaked: ' + IntToStr(Players[i].Integers[PLAYER_BREAKS_NUM]) + ' Times');
    WriteLn('|Player[' + IntToStr(i) + ']: Breaked For: ' + Int64ToStr(Round(Players[i].Integers[PLAYER_BREAKS_TOTAL] / 60000)) + ' Total Minutes');
  end;
  WriteLn('|__________________________________');
  WriteLn('|                                  ');
  for i := 0 to (HowManyPlayers - 1) do
    WriteLn('|Player[' + IntToStr(i) + ']: Exp Gained: ' + IntToStr(Players[i].Integers[PLAYER_EXP_NEW] - Players[i].Integers[PLAYER_EXP_OLD]));
  WriteLn('|__________________________________');}
  WriteLn('|                                  ');
  WriteLn('| ------------ r!ch!e ------------ ');
  WriteLn('|__________________________________');
  WriteLn('');
end;

{*******************************************************************************
procedure ScriptTerminate;
Description: Last things to execute when script has finished or terminated.
*******************************************************************************}
procedure ScriptTerminate;
begin
  Report;
  //if LoggedIn then
    //LogOut;
end;

{*******************************************************************************
procedure SetupRS;
Description: Configures RS for Current Player.
*******************************************************************************}
procedure SetupRS;
begin
  if not LoggedIn then
    LoginPlayer;
  Wait(1500 + Random(30));
  R_SetCameraAngle(100);
  R_MakeCompass('n');
  R_SetRun(True);
  Debug('Current Position: (' + IntToStr(R_GetMyPos.x) + ', ' + IntToStr(R_GetMyPos.y) + ')', False);
end;

{*******************************************************************************
                                  End Script
*******************************************************************************}

function EctoLoop: Boolean;
begin
  if R_OpenBankFrem then
    if R_UseBankFrem(Players[CurrentPlayer].Integers[PLAYER_BONE]) then
      if R_UseEctophial then
        if R_ClickTo(PATH_StairUF1) then
          if R_UseStair(OBJ_INTERACTABLE, ID_StairUF1, 'Up', Point(3666, 3522), Point(3667, 3522)) then
            if R_GrindBones(Players[CurrentPlayer].Integers[PLAYER_BONE]) then
              if R_WalkTo(PATH_StairDF1) then
                if R_UseStair(OBJ_INTERACTABLE, ID_StairDF1, 'own', Point(3666, 3517), Point(3667, 3517)) then
                  if R_WalkTo(PATH_TrapDoor) then
                    if R_OpenTrapDoor then
                      if R_ToSlime then
                        if R_GetSlime then
                          if R_UseEctophial then
                            if R_Worship then
                              if R_WalkTo(PATH_Token) then
                                if R_CollectTokens then
                                  if R_UseRing then
                                    if R_WalkTo(PATH_FremBank) then
                                      Result := True;
end;
{*******************************************************************************
procedure MainLoop;
Description: The Main Loop :)
*******************************************************************************}
procedure MainLoop;
begin
  SetupRS;
  R_CheckSetup;
  repeat
    if not EctoLoop then
    begin
      NextPlayer(False);
      Exit;
    end;
  until(Players[CurrentPlayer].Integers[PLAYER_BONEDONE] >= Players[CurrentPlayer].Integers[PLAYER_BONETODO]);
  Report;
  NextPlayer(False);
end;

begin
  AddOnTerminate('ScriptTerminate');
  SetupSmart;
  SetupSRL;
  R_UpdateHooks;
  MouseSpeed := MOUSE_SPEED;
  DeclarePlayers;

   //Debug('Current Position: (' + IntToStr(R_GetMyPos.x) + ', ' + IntToStr(R_GetMyPos.y) + ')', True);
  repeat
    MainLoop;
  until(AllPlayersInActive);
end.
